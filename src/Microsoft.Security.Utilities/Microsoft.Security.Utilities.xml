<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Security.Utilities</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Security.Utilities.CustomAlphabetEncoder">
            <summary>
            Custom encoder class.
            </summary>
        </member>
        <member name="M:Microsoft.Security.Utilities.CustomAlphabetEncoder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Security.Utilities.CustomAlphabetEncoder"/> class.
            </summary>
            <param name="customAlphabet">The alphabet to be used for all encoding/decoding operations. Must consist of nonwhitespace ASCII letters, numbers, and/or punctuation.</param>
            <exception cref="T:System.ArgumentException">customAlphabet contains a duplicate or forbidden character.</exception>
        </member>
        <member name="M:Microsoft.Security.Utilities.CustomAlphabetEncoder.Encode(System.UInt32)">
            <summary>
            Encode an unsigned integer (a checksum) in a given character set.
            </summary>
            <param name="data">The unsigned integer to encode.</param>
            <returns>
            The unsigned integer encoded using the character set with which this class was instantiated.
            </returns>
        </member>
        <member name="M:Microsoft.Security.Utilities.CustomAlphabetEncoder.Decode(System.String)">
            <summary>
            Decode a byte array from a given character set.
            </summary>
            <param name="encodedValue">The encoded byte array to decode.</param>
            <returns>
            The byte array encoded using the character set wit which this class was instantiated.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="encodedValue"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Security.Utilities.IdentifiableSecrets.GenerateBase64Key(System.UInt64,System.UInt32,System.String,System.Boolean)">
            <summary>
            Generate an identifiable secret rendered in the standard base64-encoding alphabet.
            </summary>
            <param name="checksumSeed"></param>
            <param name="keyLengthInBytes">The size of the secret.</param>
            <param name="base64EncodedSignature">The signature that will be encoded in the identifiable secret.</param>
            <param name="encodeForUrl">'true' if the returned token should be encoded in a URL-compatible form 
            (replacing the '+' and '/' characters and dropping any padding).</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Security.Utilities.IdentifiableSecrets.ValidateBase64Key(System.String,System.UInt64,System.String,System.Boolean)">
            <summary>
            Validate if the identifiable secret contains a valid format.
            </summary>
            <param name="key">A base64-encoded identifiable secret, encoded using the standard base64-alphabet or a URL friendly alternate.</param>
            <param name="checksumSeed">The seed used to initialize the Marvin32 checksum algorithm.</param>
            <param name="base64EncodedSignature">A fixed signature that should immediately precede the checksum in the encoded secret.</param>
            <param name="encodeForUrl">'true' if the secret was encoded for URLs (replacing '+' and '/' characters and eliminating any padding).</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Security.Utilities.Marvin" -->
        <member name="M:Microsoft.Security.Utilities.Marvin.ComputeHash32(System.Byte[],System.UInt64,System.Int32,System.Int32)">
            <summary>
            Convenience method to compute a Marvin hash and collapse it into a 32-bit hash.
            </summary>
            <param name="data">The data to be hashed.</param>
            <param name="seed">A seed provided to the checksum implementation that helps randomize results
            <param name="offset">The offset from which to compute the checksum.</param>
            <param name="length">The number of bytes to checksum.</param>
            and ensures that checksums for shorter data buffers aren't constrained to less than 64 bits.</param>
            <returns>The computed Marvin32 64-bit checksum of the input data collapsed into a 32-bit value.</returns>
        </member>
        <member name="M:Microsoft.Security.Utilities.Marvin.ComputeHash(System.Byte[],System.UInt64,System.Int32,System.Int32)">
            <summary>
            Computes a 64-bit hash using the Marvin algorithm.
            </summary>
            <param name="data">The data to be hashed.</param>
            <param name="seed">A seed provided to the checksum implementation that helps randomize results
            and ensures that checksums for shorter data buffers aren't constrained to less than 64 bits.</param>
            <param name="offset">The offset from which to compute the checksum.</param>
            <param name="length">The number of bytes to checksum.</param>
            <returns>The computed Marvin32 64-bit checksum of the input data.</returns>
        </member>
        <member name="M:Microsoft.Security.Utilities.Marvin.Block(System.UInt32@,System.UInt32@)">
            <summary>
            Combines hash code of multiple objects while trying to minimize possibility of collisions.
            </summary>
            <param name="rp0">Hash code seed.</param>
            <param name="rp1">Delegates to generate hash codes to combine.</param>
        </member>
        <member name="M:Microsoft.Security.Utilities.Marvin.Rotate(System.UInt32,System.Int32)">
            <summary>
            Shift bits in an unsigned integer.
            </summary>
            <param name="value">Unsigned integer to left- or right-rotate.</param>
            <param name="shift">The number of bits to rotate right or left.</param>
            <returns>Rotated unsigned value.</returns>
        </member>
    </members>
</doc>
